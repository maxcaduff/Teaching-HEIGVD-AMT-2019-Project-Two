/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Booking;
import io.swagger.annotations.*;
import io.swagger.model.BookingEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-05T20:58:36.237Z[GMT]")
@Api(value = "bookings", description = "the booking API")
public interface BookingApi {

    @ApiOperation(value = "get logged user's bookings", nickname = "getBookings", notes = "", response = Booking.class, responseContainer = "List"
            , authorizations = {@Authorization(value = "bearerAuth")    }, tags={ "bookings", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Booking.class, responseContainer = "List"),
            @ApiResponse(code = 401, message = "Auth token required"),
            @ApiResponse(code = 406, message = "Bad accept header") })
    @RequestMapping(value = "/booking/my",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Booking>> getBookings(@ApiParam(value = "page wished, defaults to first page (0).") @Valid @RequestParam(value = "page", required = false) Integer page
            ,@ApiParam(value = "true to get previous bookings.") @Valid @RequestParam(value = "previous", required = false) Boolean previous );


    @ApiOperation(value = "submits booking for logged user", nickname = "book", notes = "creates or edit a booking if it already exists (same date, activity and location) by cumulating the given number of places with existing"
            , authorizations = { @Authorization(value = "bearerAuth") }, tags={ "bookings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful booking"),
        @ApiResponse(code = 401, message = "must be logged"),
        @ApiResponse(code = 403, message = "Not enough places left")})
    @RequestMapping(value = "/booking",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> book(@ApiParam(value = "Booking infos" ,required=true )  @Valid @RequestBody Booking body );


    @ApiOperation(value = "deletes booking for logged user", nickname = "deleteBooking", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "bookings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successfully deleted"),
        @ApiResponse(code = 401, message = "must be logged"),
        @ApiResponse(code = 403, message = "unauthorized"),
        @ApiResponse(code = 404, message = "booking not found") })
    @RequestMapping(value = "/booking/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBooking(@ApiParam(value = "id of booking to delete",required=true) @PathVariable("id") Integer id );

}
