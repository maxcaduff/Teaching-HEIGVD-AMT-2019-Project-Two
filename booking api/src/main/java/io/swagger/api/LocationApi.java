/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Location;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-01-05T20:58:36.237Z[GMT]")
@Api(value = "location", description = "the location API")
public interface LocationApi {

    @ApiOperation(value = "Add a new location", nickname = "addLocation", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Location created successfully"),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 401, message = "Auth token required"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/location",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addLocation(@ApiParam(value = "New location to add" ,required=true )  @Valid @RequestBody Location body
);


    @ApiOperation(value = "Delete the specified location, id must exist", nickname = "deleteLocation", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted successfully"),
        @ApiResponse(code = 401, message = "Auth token required"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "id not found") })
    @RequestMapping(value = "/location/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteLocation(@ApiParam(value = "id of location to delete",required=true) @PathVariable("id") Integer id
);


    @ApiOperation(value = "Get all locations", nickname = "getLocations", notes = "", response = Location.class, responseContainer = "List", tags={ "locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Location.class, responseContainer = "List"),
        @ApiResponse(code = 406, message = "Bad accept header") })
    @RequestMapping(value = "/location/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Location>> getLocations(@ApiParam(value = "page wished, defaults to first page (0).") @Valid @RequestParam(value = "page", required = false) Integer page
);


    @ApiOperation(value = "Update a location, id must exist", nickname = "updateLocation", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Updated successfully"),
        @ApiResponse(code = 400, message = "Invalid input"),
        @ApiResponse(code = 401, message = "Auth token required"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "id not found") })
    @RequestMapping(value = "/location/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateLocation(@ApiParam(value = "New values for location" ,required=true )  @Valid @RequestBody Location body
,@ApiParam(value = "id of location to edit.",required=true) @PathVariable("id") Integer id
);

}
